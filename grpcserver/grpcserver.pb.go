// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcserver.proto

package grpcserver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WithName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithName) Reset()         { *m = WithName{} }
func (m *WithName) String() string { return proto.CompactTextString(m) }
func (*WithName) ProtoMessage()    {}
func (*WithName) Descriptor() ([]byte, []int) {
	return fileDescriptor_afa6debe97205904, []int{0}
}

func (m *WithName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithName.Unmarshal(m, b)
}
func (m *WithName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithName.Marshal(b, m, deterministic)
}
func (m *WithName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithName.Merge(m, src)
}
func (m *WithName) XXX_Size() int {
	return xxx_messageInfo_WithName.Size(m)
}
func (m *WithName) XXX_DiscardUnknown() {
	xxx_messageInfo_WithName.DiscardUnknown(m)
}

var xxx_messageInfo_WithName proto.InternalMessageInfo

func (m *WithName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*WithName)(nil), "WithName")
}

func init() { proto.RegisterFile("grpcserver.proto", fileDescriptor_afa6debe97205904) }

var fileDescriptor_afa6debe97205904 = []byte{
	// 105 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2f, 0x2a, 0x48,
	0x2e, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe3, 0xe2,
	0x08, 0xcf, 0x2c, 0xc9, 0xf0, 0x4b, 0xcc, 0x4d, 0x15, 0x12, 0xe2, 0x62, 0xc9, 0x03, 0xd2, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x91, 0x31, 0x17, 0x9f, 0x7b, 0x6a, 0x09, 0x48,
	0x3a, 0x18, 0xa8, 0x2d, 0x33, 0x39, 0x55, 0x48, 0x91, 0x8b, 0x1d, 0x2a, 0x22, 0xc4, 0xa9, 0x07,
	0xd3, 0x2b, 0x85, 0x60, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0xcd, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x84, 0xc6, 0xfa, 0x4f, 0x6f, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GetNameServiceClient is the client API for GetNameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetNameServiceClient interface {
	GetName(ctx context.Context, in *WithName, opts ...grpc.CallOption) (*WithName, error)
}

type getNameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGetNameServiceClient(cc *grpc.ClientConn) GetNameServiceClient {
	return &getNameServiceClient{cc}
}

func (c *getNameServiceClient) GetName(ctx context.Context, in *WithName, opts ...grpc.CallOption) (*WithName, error) {
	out := new(WithName)
	err := c.cc.Invoke(ctx, "/GetNameService/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetNameServiceServer is the server API for GetNameService service.
type GetNameServiceServer interface {
	GetName(context.Context, *WithName) (*WithName, error)
}

// UnimplementedGetNameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetNameServiceServer struct {
}

func (*UnimplementedGetNameServiceServer) GetName(ctx context.Context, req *WithName) (*WithName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}

func RegisterGetNameServiceServer(s *grpc.Server, srv GetNameServiceServer) {
	s.RegisterService(&_GetNameService_serviceDesc, srv)
}

func _GetNameService_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetNameServiceServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetNameService/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetNameServiceServer).GetName(ctx, req.(*WithName))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetNameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GetNameService",
	HandlerType: (*GetNameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _GetNameService_GetName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcserver.proto",
}
